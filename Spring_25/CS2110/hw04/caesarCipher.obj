LC-3 OBJ FILE

.TEXT
3000
117
2C0A
1DBF
200A
7180
1DBF
2006
7180
4821
6180
1DA3
F025
F000
4000
0007
0041
0061
001A
1DBF
3012
3212
3412
3E12
6181
6382
0406
947F
14A1
1402
0802
10A0
0FFA
7180
2004
2204
2404
2E04
C1C0
????
????
????
????
1DBF
3043
3243
3443
3643
3843
3A43
3E43
6181
6382
1420
6680
042F
29D8
993F
1921
18C4
0812
2BD4
9B7F
1B61
1B05
020D
1901
1DBF
2BCD
7B80
1DBF
7980
4FCA
6980
1DA2
2BC5
1705
7680
0E16
29C0
993F
1921
18C4
0811
2BBD
9B7F
1B61
1B05
020C
1901
1DBF
2BB6
7B80
1DBF
7980
4FB3
6980
1DA2
2BAD
1705
7680
14A1
0FCF
7180
2007
2207
2407
2607
2807
2A07
2E07
C1C0
????
????
????
????
????
????
????
4000
6
0068
0065
006C
006C
006F
0000

.SYMBOL
ADDR | EXT | LABEL
300B |   0 | STACK_PTR
300C |   0 | STRING
300D |   0 | SHIFT
300E |   0 | ASCIIUPPERA
300F |   0 | ASCIILOWERA
3010 |   0 | ALPHABETLEN
3011 |   0 | MOD
3019 |   0 | MOD_LOOP
301F |   0 | MOD_DONE
3025 |   0 | MOD_SAVE_R0
3026 |   0 | MOD_SAVE_R1
3027 |   0 | MOD_SAVE_R2
3028 |   0 | MOD_SAVE_R7
3029 |   0 | ENCRYPT
3034 |   0 | ENCRYPT_LOOP
304D |   0 | NOT_LOWERCASE
3063 |   0 | NEXT_CHAR
3065 |   0 | ENCRYPT_DONE
306E |   0 | ENCRYPT_SAVE_R0
306F |   0 | ENCRYPT_SAVE_R1
3070 |   0 | ENCRYPT_SAVE_R2
3071 |   0 | ENCRYPT_SAVE_R3
3072 |   0 | ENCRYPT_SAVE_R4
3073 |   0 | ENCRYPT_SAVE_R5
3074 |   0 | ENCRYPT_SAVE_R7

.LINKER_INFO

.DEBUG
# DEBUG SYMBOLS FOR LC3TOOLS

LABEL           | INDEX
STACK_PTR       |   803
STRING          |   829
SHIFT           |   852
ASCIIUPPERA     |   870
ASCIILOWERA     |   895
ALPHABETLEN     |   920
MOD             |   944
MOD_LOOP        |  1546
MOD_DONE        |  1725
MOD_SAVE_R0     |  1885
MOD_SAVE_R1     |  1905
MOD_SAVE_R2     |  1925
MOD_SAVE_R7     |  1945
ENCRYPT         |  1968
ENCRYPT_LOOP    |  2282
NOT_LOWERCASE   |  3153
NEXT_CHAR       |  3904
ENCRYPT_DONE    |  3971
ENCRYPT_SAVE_R0 |  4204
ENCRYPT_SAVE_R1 |  4228
ENCRYPT_SAVE_R2 |  4252
ENCRYPT_SAVE_R3 |  4276
ENCRYPT_SAVE_R4 |  4300
ENCRYPT_SAVE_R5 |  4324
ENCRYPT_SAVE_R7 |  4348
====================
LINE | ADDR | SOURCE
   0 | ???? | ;;=============================================================\n
   1 | ???? | ;; CS 2110 - Spring 2025\n
   2 | ???? | ;; Homework 4 - Caesar Cipher\n
   3 | ???? | ;;=============================================================\n
   4 | ???? | ;; Name: Nicholas Stone\n
   5 | ???? | ;;=============================================================\n
   6 | ???? | \n
   7 | ???? | ;;  In this file, you must implement the \'MOD\' and \'ENCRYPT\' subroutines.\n
   8 | ???? |     \n
   9 | ???? | .orig x3000\n
  10 | ???? |     ;; You do not need to write anything here\n
  11 | 3000 |     LD R6, STACK_PTR\n
  12 | ???? |     \n
  13 | ???? |     ;; Pushes arguments (string to encrypt, shift)\n
  14 | 3001 |     ADD R6, R6, -1\n
  15 | 3002 |     LD R0, SHIFT\n
  16 | 3003 |     STR R0, R6, 0\n
  17 | ???? |     \n
  18 | 3004 |     ADD R6, R6, -1\n
  19 | 3005 |     LD R0, STRING\n
  20 | 3006 |     STR R0, R6, 0\n
  21 | ???? |     \n
  22 | 3007 |     JSR ENCRYPT\n
  23 | ???? |     \n
  24 | 3008 |     LDR R0, R6, 0\n
  25 | 3009 |     ADD R6, R6, 3\n
  26 | ???? | \n
  27 | 300A |     HALT\n
  28 | ???? |     \n
  29 | ???? |     ;; Do not rename or remove any existing labels\n
  30 | ???? |     ;; You may change the value of STRING, LENGTH, SHIFT for debugging\n
  31 | 300B |     STACK_PTR .fill xF000\n
  32 | 300C |     STRING .fill x4000\n
  33 | 300D |     SHIFT .fill 7\n
  34 | 300E |     ASCIIUPPERA .fill 65\n
  35 | 300F |     ASCIILOWERA .fill 97\n
  36 | 3010 |     ALPHABETLEN .fill 26\n
  37 | ???? | \n
  38 | ???? | \n
  39 | ???? | \n
  40 | ???? | MOD ;; Do not change this label! Treat this as like the name of the function in a function header\n
  41 | ???? |     ;; Code your implementation for the MOD subroutine here!\n
  42 | ???? | \n
  43 | ???? |     ;;  MOD Pseudocode (see PDF for explanation and examples)   \n
  44 | ???? | ;;  \n
  45 | ???? | ;;  MOD(int a, int b) {\n
  46 | ???? | ;;      while (a >= b) {\n
  47 | ???? | ;;          a -= b;\n
  48 | ???? | ;;      }\n
  49 | ???? | ;;      return a;\n
  50 | ???? | ;;  }\n
  51 | ???? | \n
  52 | 3011 | ADD R6, R6, -1\n
  53 | 3012 | ST R0, MOD_SAVE_R0      ; dividend, a\n
  54 | 3013 | ST R1, MOD_SAVE_R1      ; divisor, b\n
  55 | 3014 | ST R2, MOD_SAVE_R2      ; temp, a-b\n
  56 | 3015 | ST R7, MOD_SAVE_R7      ; this is the return address\n
  57 | 3016 | LDR R0, R6, 1    ; R0 = a\n
  58 | 3017 | LDR R1, R6, 2    ; R1 = b\n
  59 | 3018 | BRz MOD_DONE     ; If zero, return a\n
  60 | ???? | MOD_LOOP\n
  61 | 3019 |     NOT R2, R1\n
  62 | 301A |     ADD R2, R2, 1    ; 2\'s complement\n
  63 | 301B |     ADD R2, R0, R2\n
  64 | 301C |     BRn MOD_DONE     ; If sum is negative, exit\n
  65 | 301D |     ADD R0, R2, 0    ; R0 = a - b\n
  66 | 301E |     BR MOD_LOOP\n
  67 | ???? | MOD_DONE\n
  68 | 301F |     STR R0, R6, 0    ; result stored on stack\n
  69 | 3020 |     LD R0, MOD_SAVE_R0\n
  70 | 3021 |     LD R1, MOD_SAVE_R1\n
  71 | 3022 |     LD R2, MOD_SAVE_R2\n
  72 | 3023 |     LD R7, MOD_SAVE_R7\n
  73 | 3024 |     RET\n
  74 | ???? |     \n
  75 | 3025 | MOD_SAVE_R0 .blkw 1\n
  76 | 3026 | MOD_SAVE_R1 .blkw 1\n
  77 | 3027 | MOD_SAVE_R2 .blkw 1\n
  78 | 3028 | MOD_SAVE_R7 .blkw 1\n
  79 | ???? | \n
  80 | ???? | \n
  81 | ???? | \n
  82 | ???? | ENCRYPT\n
  83 | 3029 |     ADD R6, R6, -1      ; return value space\n
  84 | 302A |     ST R0, ENCRYPT_SAVE_R0\n
  85 | 302B |     ST R1, ENCRYPT_SAVE_R1\n
  86 | 302C |     ST R2, ENCRYPT_SAVE_R2\n
  87 | 302D |     ST R3, ENCRYPT_SAVE_R3\n
  88 | 302E |     ST R4, ENCRYPT_SAVE_R4\n
  89 | 302F |     ST R5, ENCRYPT_SAVE_R5\n
  90 | 3030 |     ST R7, ENCRYPT_SAVE_R7\n
  91 | 3031 |     LDR R0, R6, 1\n
  92 | 3032 |     LDR R1, R6, 2\n
  93 | 3033 |     ADD R2, R0, 0        ; R2 = str\n
  94 | ???? | ENCRYPT_LOOP\n
  95 | 3034 |     LDR R3, R2, 0        ; R3 = str[i]\n
  96 | 3035 |     BRz ENCRYPT_DONE     ; if 0, move to ENCRYPT_DONE\n
  97 | 3036 |     LD R4, ASCIILOWERA   ; R4 = ascii a\n
  98 | 3037 |     NOT R4, R4\n
  99 | 3038 |     ADD R4, R4, 1        ; 2\'s complement\n
 100 | 3039 |     ADD R4, R3, R4       ; char - a\n
 101 | 303A |     BRn NOT_LOWERCASE    ; If negative, go to NOT_LOWERCASE\n
 102 | 303B |     LD R5, ALPHABETLEN\n
 103 | 303C |     NOT R5, R5\n
 104 | 303D |     ADD R5, R5, 1        ; 2\'s complement\n
 105 | 303E |     ADD R5, R4, R5       ; (char - a) - 26\n
 106 | 303F |     BRp NOT_LOWERCASE    ; If positive, go to NOT_LOWERCASE\n
 107 | 3040 |     ADD R4, R4, R1       ; (char - a) + k\n
 108 | 3041 |     ADD R6, R6, -1       ; decrement\n
 109 | 3042 |     LD R5, ALPHABETLEN   ; R5 = 26\n
 110 | 3043 |     STR R5, R6, 0        ; Push 26 as second argument\n
 111 | 3044 |     ADD R6, R6, -1       ; decrement\n
 112 | 3045 |     STR R4, R6, 0        ; (char - a) + k\n
 113 | 3046 |     JSR MOD\n
 114 | 3047 |     LDR R4, R6, 0\n
 115 | 3048 |     ADD R6, R6, 2\n
 116 | 3049 |     LD R5, ASCIILOWERA   ; R5 = ascii a\n
 117 | 304A |     ADD R3, R4, R5\n
 118 | 304B |     STR R3, R2, 0\n
 119 | 304C |     BR NEXT_CHAR\n
 120 | ???? | NOT_LOWERCASE\n
 121 | 304D |     LD R4, ASCIIUPPERA   ; R4 = ascii A\n
 122 | 304E |     NOT R4, R4\n
 123 | 304F |     ADD R4, R4, 1        ; 2\'s complement\n
 124 | 3050 |     ADD R4, R3, R4       ; R4 = char - \'A\'\n
 125 | 3051 |     BRn NEXT_CHAR        ; If negative, break\n
 126 | 3052 |     LD R5, ALPHABETLEN   ; R5 = 26\n
 127 | 3053 |     NOT R5, R5\n
 128 | 3054 |     ADD R5, R5, 1        ; 2\'s complement\n
 129 | 3055 |     ADD R5, R4, R5       ; R5 = (char - A) - 26\n
 130 | 3056 |     BRp NEXT_CHAR        ; If positive, NEXT_CHAR\n
 131 | 3057 |     ADD R4, R4, R1\n
 132 | 3058 |     ADD R6, R6, -1\n
 133 | 3059 |     LD R5, ALPHABETLEN   ; R5 = 26\n
 134 | 305A |     STR R5, R6, 0\n
 135 | 305B |     ADD R6, R6, -1\n
 136 | 305C |     STR R4, R6, 0        ; Push (char - A) + k\n
 137 | 305D |     JSR MOD\n
 138 | 305E |     LDR R4, R6, 0        ; R4 = MOD((char - A) + k, 26)\n
 139 | 305F |     ADD R6, R6, 2\n
 140 | 3060 |     LD R5, ASCIIUPPERA   ; R5 = ascii A\n
 141 | 3061 |     ADD R3, R4, R5       ; R3 = MOD((char - A) + k, 26) + A\n
 142 | 3062 |     STR R3, R2, 0\n
 143 | ???? | NEXT_CHAR\n
 144 | 3063 |     ADD R2, R2, 1        ; increment\n
 145 | 3064 |     BR ENCRYPT_LOOP\n
 146 | ???? | ENCRYPT_DONE\n
 147 | 3065 |     STR R0, R6, 0\n
 148 | 3066 |     LD R0, ENCRYPT_SAVE_R0\n
 149 | 3067 |     LD R1, ENCRYPT_SAVE_R1\n
 150 | 3068 |     LD R2, ENCRYPT_SAVE_R2\n
 151 | 3069 |     LD R3, ENCRYPT_SAVE_R3\n
 152 | 306A |     LD R4, ENCRYPT_SAVE_R4\n
 153 | 306B |     LD R5, ENCRYPT_SAVE_R5\n
 154 | 306C |     LD R7, ENCRYPT_SAVE_R7\n
 155 | 306D |     RET\n
 156 | ???? |     \n
 157 | 306E | ENCRYPT_SAVE_R0 .blkw 1\n
 158 | 306F | ENCRYPT_SAVE_R1 .blkw 1\n
 159 | 3070 | ENCRYPT_SAVE_R2 .blkw 1\n
 160 | 3071 | ENCRYPT_SAVE_R3 .blkw 1\n
 161 | 3072 | ENCRYPT_SAVE_R4 .blkw 1\n
 162 | 3073 | ENCRYPT_SAVE_R5 .blkw 1\n
 163 | 3074 | ENCRYPT_SAVE_R7 .blkw 1\n
 164 | ???? | \n
 165 | ???? | .end\n
 166 | ???? | \n
 167 | ???? | ;; You may change the value of the string for debugging\n
 168 | ???? | .orig x4000\n
 169 | 4000 |     .stringz \"hello\"\n
 170 | ???? | .end
====================
