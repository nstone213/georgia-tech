LC-3 OBJ FILE

.TEXT
3000
133
2C0A
1DBF
200A
7180
1DBF
2006
7180
4820
6180
1DA3
F025
F000
4000
0007
0041
0061
001A
3012
3212
3412
3E12
6180
6381
0406
947F
14A1
1402
0802
10A0
0FFA
7180
2004
2204
2404
2E04
C1C0
????
????
????
????
3055
3255
3455
3655
3855
3A55
3E55
6180
6381
54A0
1620
68C0
0403
14A1
16E1
0FFB
56E0
1820
9ABF
1B61
1AC5
0638
6B00
21CF
903F
1021
1140
0815
21CA
102D
102C
903F
1021
1140
020E
21C3
903F
1021
1B40
1DBF
7B80
1DBF
7380
4FBD
6B80
1DA2
21B8
1B40
0E19
21B4
903F
1021
1140
0814
21AF
102D
102C
903F
1021
1140
020D
21A8
903F
1021
1B40
1DBF
7B80
1DBF
7380
4FA3
6B80
1DA2
219D
1B40
7B00
16E1
1921
0FC4
2007
2207
2407
2607
2807
2A07
2E07
C1C0
????
????
????
????
????
????
????
4000
6
0068
0065
006C
006C
006F
0000

.SYMBOL
ADDR | EXT | LABEL
300B |   0 | STACK_PTR
300C |   0 | STRING
300D |   0 | SHIFT
300E |   0 | ASCIIUPPERA
300F |   0 | ASCIILOWERA
3010 |   0 | ALPHABETLEN
3011 |   0 | MOD
3018 |   0 | MOD_LOOP
301E |   0 | MOD_DONE
3024 |   0 | MOD_SAVE_R0
3025 |   0 | MOD_SAVE_R1
3026 |   0 | MOD_SAVE_R2
3027 |   0 | MOD_SAVE_R7
3028 |   0 | ENCRYPT
3033 |   0 | ENCRYPT_LENGTH_LOOP
3038 |   0 | ENCRYPT_LENGTH_DONE
303A |   0 | ENCRYPT_LOOP
3059 |   0 | ENCRYPT_CHECK_UPPER
3072 |   0 | ENCRYPT_UPDATE_CHAR
3076 |   0 | ENCRYPT_DONE
307E |   0 | ENCRYPT_SAVE_R0
307F |   0 | ENCRYPT_SAVE_R1
3080 |   0 | ENCRYPT_SAVE_R2
3081 |   0 | ENCRYPT_SAVE_R3
3082 |   0 | ENCRYPT_SAVE_R4
3083 |   0 | ENCRYPT_SAVE_R5
3084 |   0 | ENCRYPT_SAVE_R7

.LINKER_INFO

.DEBUG
# DEBUG SYMBOLS FOR LC3TOOLS

LABEL               | INDEX
STACK_PTR           |   710
STRING              |   736
SHIFT               |   759
ASCIIUPPERA         |   777
ASCIILOWERA         |   802
ALPHABETLEN         |   827
MOD                 |   849
MOD_LOOP            |  1279
MOD_DONE            |  1564
MOD_SAVE_R0         |  1817
MOD_SAVE_R1         |  1837
MOD_SAVE_R2         |  1857
MOD_SAVE_R7         |  1877
ENCRYPT             |  1898
ENCRYPT_LENGTH_LOOP |  2483
ENCRYPT_LENGTH_DONE |  2718
ENCRYPT_LOOP        |  2904
ENCRYPT_CHECK_UPPER |  4284
ENCRYPT_UPDATE_CHAR |  5343
ENCRYPT_DONE        |  5607
ENCRYPT_SAVE_R0     |  5875
ENCRYPT_SAVE_R1     |  5899
ENCRYPT_SAVE_R2     |  5923
ENCRYPT_SAVE_R3     |  5947
ENCRYPT_SAVE_R4     |  5971
ENCRYPT_SAVE_R5     |  5995
ENCRYPT_SAVE_R7     |  6019
====================
LINE | ADDR | SOURCE
   0 | ???? | ;;=============================================================\n
   1 | ???? | ;; CS 2110 - Spring 2025\n
   2 | ???? | ;; Homework 4 - Caesar Cipher\n
   3 | ???? | ;;=============================================================\n
   4 | ???? | ;; Name: \n
   5 | ???? | ;;=============================================================\n
   6 | ???? | \n
   7 | ???? | .orig x3000\n
   8 | ???? |     ;; You do not need to write anything here\n
   9 | 3000 |     LD R6, STACK_PTR\n
  10 | ???? |     \n
  11 | ???? |     ;; Pushes arguments (string to encrypt, shift)\n
  12 | 3001 |     ADD R6, R6, -1\n
  13 | 3002 |     LD R0, SHIFT\n
  14 | 3003 |     STR R0, R6, 0\n
  15 | ???? |     \n
  16 | 3004 |     ADD R6, R6, -1\n
  17 | 3005 |     LD R0, STRING\n
  18 | 3006 |     STR R0, R6, 0\n
  19 | ???? |     \n
  20 | 3007 |     JSR ENCRYPT\n
  21 | ???? |     \n
  22 | 3008 |     LDR R0, R6, 0\n
  23 | 3009 |     ADD R6, R6, 3\n
  24 | ???? | \n
  25 | 300A |     HALT\n
  26 | ???? |     \n
  27 | ???? |     ;; Do not rename or remove any existing labels\n
  28 | ???? |     ;; You may change the value of STRING, LENGTH, SHIFT for debugging\n
  29 | 300B |     STACK_PTR .fill xF000\n
  30 | 300C |     STRING .fill x4000\n
  31 | 300D |     SHIFT .fill 7\n
  32 | 300E |     ASCIIUPPERA .fill 65\n
  33 | 300F |     ASCIILOWERA .fill 97\n
  34 | 3010 |     ALPHABETLEN .fill 26\n
  35 | ???? | \n
  36 | ???? | MOD ;; Do not change this label! Treat this as like the name of the function in a function header\n
  37 | ???? |     ;; Save registers\n
  38 | 3011 |     ST R0, MOD_SAVE_R0\n
  39 | 3012 |     ST R1, MOD_SAVE_R1\n
  40 | 3013 |     ST R2, MOD_SAVE_R2\n
  41 | 3014 |     ST R7, MOD_SAVE_R7\n
  42 | ???? |     \n
  43 | ???? |     ;; Get parameters from stack\n
  44 | 3015 |     LDR R0, R6, 0    ;; R0 = a (first argument)\n
  45 | 3016 |     LDR R1, R6, 1    ;; R1 = b (second argument)\n
  46 | ???? |     \n
  47 | ???? |     ;; Check if b is zero\n
  48 | 3017 |     BRz MOD_DONE     ;; If b is zero, return a\n
  49 | ???? |     \n
  50 | ???? | MOD_LOOP\n
  51 | ???? |     ;; Check if a < b\n
  52 | 3018 |     NOT R2, R1       ;; R2 = ~b\n
  53 | 3019 |     ADD R2, R2, 1    ;; R2 = -b\n
  54 | 301A |     ADD R2, R0, R2   ;; R2 = a - b\n
  55 | 301B |     BRn MOD_DONE     ;; If a - b < 0, exit loop\n
  56 | ???? |     \n
  57 | ???? |     ;; a = a - b\n
  58 | 301C |     ADD R0, R2, 0    ;; R0 = a - b\n
  59 | ???? |     \n
  60 | 301D |     BR MOD_LOOP      ;; Repeat the loop\n
  61 | ???? |     \n
  62 | ???? | MOD_DONE\n
  63 | ???? |     ;; Return a\n
  64 | 301E |     STR R0, R6, 0    ;; Store result on stack (return value)\n
  65 | ???? |     \n
  66 | ???? |     ;; Restore registers\n
  67 | 301F |     LD R0, MOD_SAVE_R0\n
  68 | 3020 |     LD R1, MOD_SAVE_R1\n
  69 | 3021 |     LD R2, MOD_SAVE_R2\n
  70 | 3022 |     LD R7, MOD_SAVE_R7\n
  71 | 3023 |     RET\n
  72 | ???? |     \n
  73 | ???? | ;; Save locations for registers\n
  74 | 3024 | MOD_SAVE_R0 .blkw 1\n
  75 | 3025 | MOD_SAVE_R1 .blkw 1\n
  76 | 3026 | MOD_SAVE_R2 .blkw 1\n
  77 | 3027 | MOD_SAVE_R7 .blkw 1\n
  78 | ???? | \n
  79 | ???? | ENCRYPT ;; Do not change this label! Treat this as like the name of the function in a function header\n
  80 | ???? |     ;; Save registers\n
  81 | 3028 |     ST R0, ENCRYPT_SAVE_R0\n
  82 | 3029 |     ST R1, ENCRYPT_SAVE_R1\n
  83 | 302A |     ST R2, ENCRYPT_SAVE_R2\n
  84 | 302B |     ST R3, ENCRYPT_SAVE_R3\n
  85 | 302C |     ST R4, ENCRYPT_SAVE_R4\n
  86 | 302D |     ST R5, ENCRYPT_SAVE_R5\n
  87 | 302E |     ST R7, ENCRYPT_SAVE_R7\n
  88 | ???? | \n
  89 | ???? |     ;; Get parameters from stack\n
  90 | 302F |     LDR R0, R6, 0    ;; R0 = str (address of the string)\n
  91 | 3030 |     LDR R1, R6, 1    ;; R1 = k (shift amount)\n
  92 | ???? | \n
  93 | ???? |     ;; Calculate the length of the string\n
  94 | 3031 |     AND R2, R2, 0    ;; R2 = length = 0\n
  95 | 3032 |     ADD R3, R0, 0    ;; R3 = pointer to the string\n
  96 | ???? | \n
  97 | ???? | ENCRYPT_LENGTH_LOOP\n
  98 | 3033 |     LDR R4, R3, 0    ;; R4 = str[length]\n
  99 | 3034 |     BRz ENCRYPT_LENGTH_DONE ;; If str[length] == 0, exit loop\n
 100 | 3035 |     ADD R2, R2, 1    ;; length++\n
 101 | 3036 |     ADD R3, R3, 1    ;; Move to the next character\n
 102 | 3037 |     BR ENCRYPT_LENGTH_LOOP\n
 103 | ???? | \n
 104 | ???? | ENCRYPT_LENGTH_DONE\n
 105 | ???? |     ;; Now R2 contains the length of the string\n
 106 | ???? | \n
 107 | ???? |     ;; Encrypt each character\n
 108 | 3038 |     AND R3, R3, 0    ;; R3 = i = 0\n
 109 | 3039 |     ADD R4, R0, 0    ;; R4 = pointer to the string\n
 110 | ???? | \n
 111 | ???? | ENCRYPT_LOOP\n
 112 | ???? |     ;; Check if i < length\n
 113 | 303A |     NOT R5, R2       ;; R5 = ~length\n
 114 | 303B |     ADD R5, R5, 1    ;; R5 = -length\n
 115 | 303C |     ADD R5, R3, R5   ;; R5 = i - length\n
 116 | 303D |     BRzp ENCRYPT_DONE ;; If i >= length, exit loop\n
 117 | ???? | \n
 118 | ???? |     ;; Get the current character\n
 119 | 303E |     LDR R5, R4, 0    ;; R5 = str[i]\n
 120 | ???? | \n
 121 | ???? |     ;; Check if the character is lowercase\n
 122 | 303F |     LD R0, ASCIILOWERA\n
 123 | 3040 |     NOT R0, R0\n
 124 | 3041 |     ADD R0, R0, 1    ;; R0 = -\'a\'\n
 125 | 3042 |     ADD R0, R5, R0   ;; R0 = str[i] - \'a\'\n
 126 | 3043 |     BRn ENCRYPT_CHECK_UPPER ;; If str[i] < \'a\', check if it\'s uppercase\n
 127 | ???? | \n
 128 | ???? |     ;; Check if the character is <= \'z\'\n
 129 | 3044 |     LD R0, ASCIILOWERA\n
 130 | 3045 |     ADD R0, R0, 13   ;; R0 = \'z\'\n
 131 | 3046 |     ADD R0, R0, 12   ;; R0 = \'z\'\n
 132 | 3047 |     NOT R0, R0\n
 133 | 3048 |     ADD R0, R0, 1    ;; R0 = -\'z\'\n
 134 | 3049 |     ADD R0, R5, R0   ;; R0 = str[i] - \'z\'\n
 135 | 304A |     BRp ENCRYPT_CHECK_UPPER ;; If str[i] > \'z\', check if it\'s uppercase\n
 136 | ???? | \n
 137 | ???? |     ;; It\'s a lowercase letter\n
 138 | 304B |     LD R0, ASCIILOWERA\n
 139 | 304C |     NOT R0, R0\n
 140 | 304D |     ADD R0, R0, 1    ;; R0 = -\'a\'\n
 141 | 304E |     ADD R5, R5, R0   ;; R5 = str[i] - \'a\'\n
 142 | ???? | \n
 143 | ???? |     ;; Call MOD subroutine\n
 144 | 304F |     ADD R6, R6, -1\n
 145 | 3050 |     STR R5, R6, 0    ;; Push str[i] - \'a\' onto the stack\n
 146 | 3051 |     ADD R6, R6, -1\n
 147 | 3052 |     STR R1, R6, 0    ;; Push k onto the stack\n
 148 | 3053 |     JSR MOD\n
 149 | 3054 |     LDR R5, R6, 0    ;; R5 = MOD(str[i] - \'a\' + k, 26)\n
 150 | 3055 |     ADD R6, R6, 2    ;; Pop arguments off the stack\n
 151 | ???? | \n
 152 | ???? |     ;; Add \'a\' back to the result\n
 153 | 3056 |     LD R0, ASCIILOWERA\n
 154 | 3057 |     ADD R5, R5, R0   ;; R5 = MOD(str[i] - \'a\' + k, 26) + \'a\'\n
 155 | ???? | \n
 156 | 3058 |     BR ENCRYPT_UPDATE_CHAR\n
 157 | ???? | \n
 158 | ???? | ENCRYPT_CHECK_UPPER\n
 159 | ???? |     ;; Check if the character is uppercase\n
 160 | 3059 |     LD R0, ASCIIUPPERA\n
 161 | 305A |     NOT R0, R0\n
 162 | 305B |     ADD R0, R0, 1    ;; R0 = -\'A\'\n
 163 | 305C |     ADD R0, R5, R0   ;; R0 = str[i] - \'A\'\n
 164 | 305D |     BRn ENCRYPT_UPDATE_CHAR ;; If str[i] < \'A\', skip\n
 165 | ???? | \n
 166 | ???? |     ;; Check if the character is <= \'Z\'\n
 167 | 305E |     LD R0, ASCIIUPPERA\n
 168 | 305F |     ADD R0, R0, 13   ;; R0 = \'Z\'\n
 169 | 3060 |     ADD R0, R0, 12   ;; R0 = \'Z\'\n
 170 | 3061 |     NOT R0, R0\n
 171 | 3062 |     ADD R0, R0, 1    ;; R0 = -\'Z\'\n
 172 | 3063 |     ADD R0, R5, R0   ;; R0 = str[i] - \'Z\'\n
 173 | 3064 |     BRp ENCRYPT_UPDATE_CHAR ;; If str[i] > \'Z\', skip\n
 174 | ???? | \n
 175 | ???? |     ;; It\'s an uppercase letter\n
 176 | 3065 |     LD R0, ASCIIUPPERA\n
 177 | 3066 |     NOT R0, R0\n
 178 | 3067 |     ADD R0, R0, 1    ;; R0 = -\'A\'\n
 179 | 3068 |     ADD R5, R5, R0   ;; R5 = str[i] - \'A\'\n
 180 | ???? | \n
 181 | ???? |     ;; Call MOD subroutine\n
 182 | 3069 |     ADD R6, R6, -1\n
 183 | 306A |     STR R5, R6, 0    ;; Push str[i] - \'A\' onto the stack\n
 184 | 306B |     ADD R6, R6, -1\n
 185 | 306C |     STR R1, R6, 0    ;; Push k onto the stack\n
 186 | 306D |     JSR MOD\n
 187 | 306E |     LDR R5, R6, 0    ;; R5 = MOD(str[i] - \'A\' + k, 26)\n
 188 | 306F |     ADD R6, R6, 2    ;; Pop arguments off the stack\n
 189 | ???? | \n
 190 | ???? |     ;; Add \'A\' back to the result\n
 191 | 3070 |     LD R0, ASCIIUPPERA\n
 192 | 3071 |     ADD R5, R5, R0   ;; R5 = MOD(str[i] - \'A\' + k, 26) + \'A\'\n
 193 | ???? | \n
 194 | ???? | ENCRYPT_UPDATE_CHAR\n
 195 | ???? |     ;; Update the character in the string\n
 196 | 3072 |     STR R5, R4, 0    ;; str[i] = encrypted character\n
 197 | ???? | \n
 198 | ???? |     ;; Move to the next character\n
 199 | 3073 |     ADD R3, R3, 1    ;; i++\n
 200 | 3074 |     ADD R4, R4, 1    ;; Move to the next character in the string\n
 201 | 3075 |     BR ENCRYPT_LOOP\n
 202 | ???? | \n
 203 | ???? | ENCRYPT_DONE\n
 204 | ???? |     ;; Restore registers\n
 205 | 3076 |     LD R0, ENCRYPT_SAVE_R0\n
 206 | 3077 |     LD R1, ENCRYPT_SAVE_R1\n
 207 | 3078 |     LD R2, ENCRYPT_SAVE_R2\n
 208 | 3079 |     LD R3, ENCRYPT_SAVE_R3\n
 209 | 307A |     LD R4, ENCRYPT_SAVE_R4\n
 210 | 307B |     LD R5, ENCRYPT_SAVE_R5\n
 211 | 307C |     LD R7, ENCRYPT_SAVE_R7\n
 212 | 307D |     RET\n
 213 | ???? | \n
 214 | ???? | ;; Save locations for registers\n
 215 | 307E | ENCRYPT_SAVE_R0 .blkw 1\n
 216 | 307F | ENCRYPT_SAVE_R1 .blkw 1\n
 217 | 3080 | ENCRYPT_SAVE_R2 .blkw 1\n
 218 | 3081 | ENCRYPT_SAVE_R3 .blkw 1\n
 219 | 3082 | ENCRYPT_SAVE_R4 .blkw 1\n
 220 | 3083 | ENCRYPT_SAVE_R5 .blkw 1\n
 221 | 3084 | ENCRYPT_SAVE_R7 .blkw 1\n
 222 | ???? | \n
 223 | ???? | .end\n
 224 | ???? | \n
 225 | ???? | ;; You may change the value of the string for debugging\n
 226 | ???? | .orig x4000\n
 227 | 4000 |     .stringz \"hello\"\n
 228 | ???? | .end
====================
